plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'jacoco'
}

android {
    compileSdk 35

    defaultConfig {
        applicationId "org.blitzortung.android.app"
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 338
        versionName '2.4-b5'
        multiDexEnabled false
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain(17)
        compilerOptions {
            apiVersion = KotlinVersion.KOTLIN_2_2
        }
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
            all {
                jvmArgs '-noverify'
            }
        }
    }

    useLibrary 'android.test.base'
    lint {
        abortOnError false
        checkReleaseBuilds false
    }
    testCoverage {
        jacocoVersion '0.8.12'
    }
    namespace 'org.blitzortung.android.app'
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
    buildToolsVersion '35.0.0'

}

def dagger_version = '2.57'

dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.media:media:1.7.0'
    implementation 'androidx.core:core-ktx:1.16.0'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.work:work-runtime-ktx:2.10.3'
    implementation 'org.osmdroid:osmdroid-android:6.1.20'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'com.google.android.material:material:1.12.0'

    // Dagger2
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    implementation 'androidx.test.ext:junit-ktx:1.3.0'
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    compileOnly 'javax.annotation:jsr250-api:1.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.27.4'
    testImplementation 'io.mockk:mockk:1.14.5'
    testImplementation 'org.robolectric:robolectric:4.15.1'
    testImplementation 'androidx.test:core:1.7.0'
    androidTestImplementation 'androidx.test:runner:1.7.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
    androidTestImplementation('androidx.compose.ui:ui-test-junit4:1.9.0')
}

kapt.includeCompileClasspath = false


import org.jetbrains.kotlin.gradle.dsl.KotlinVersion

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }

    // Add files that should not be listed in the report (e.g. generated Files from dagger)
    def fileFilter = ['**/*Dagger.*']

    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    def mainSrc = "$projectDir/src/main/java"
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([kotlinDebugTree])

    // Make sure the path is correct (if not run the unit tests and try find the .exec file that is generated after the unit tests are finished should be similar to that one)
    executionData.from = fileTree(dir: "$buildDir", includes: ["outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"])

}

sonar {
    properties {
        property "sonar.junit.reportPaths", "build/test-results/testDebugUnitTest/"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}
